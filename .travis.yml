matrix:
  fast_finish: true
  include:
    # Python 2 // using container based builds
    - os: linux
      language: python # This lets us use newer python versions from virtualenv
      env:
        - TRAVIS_CONFIG=PYTHON2 # used if you want to run environment specific stuff in before_script
      sudo: false
      cache:
        apt: true
        pip: true
        directories:
          - /tmp # cache any previously downloaded .osm files
        timeout: 1000
      compiler: clang
      python: "2.7"
      addons:
        postgresql: "9.4"
        apt:
          sources:
            - sourceline: 'ppa:ubuntugis/ubuntugis-unstable'  # postgis
          packages:
            - postgresql-9.4-postgis-2.3 
            - osm2pgsql
    # Python 3 // using container based builds
    - os: linux
      language: python # This lets us use newer python versions from virtualenv
      env:
        - TRAVIS_CONFIG=PYTHON3 # used if you want to run environment specific stuff in before_script
      dist: trusty
      sudo: false
      cache:
        apt: true
        pip: true
        directories:
          - /tmp # cache any previously downloaded .osm files
      python: "3.6"
      addons:
        postgresql: "9.4"
        apt:
          sources:
            - sourceline: 'ppa:ubuntugis/ubuntugis-unstable'  # postgis
          packages:
            - postgresql-9.4-postgis-2.3 
            - osm2pgsql
git:
  depth: 30

notifications:
  irc:
    channels:
      - "irc.freenode.org#kartoza"
    use_notice: true

  email:
    - tim@kartoza.com
#  webhooks:
#    urls:
#      - https://webhooks.gitter.im/e/467e3aff72e344d1dae3 # need to get a proper app key first
#    on_success: change  # options: [always|never|change] default: always
#    on_failure: always # options: [always|never|change] default: always
#    on_start: never # default: never

before_install:
  #- ./ci/travis/${TRAVIS_CONFIG}/before_install.sh
  -

install:
  #- ./ci/travis/${TRAVIS_CONFIG}/install.sh
  -

before_script:
  - echo "Build starting on " `date`
  - psql -U postgres -c "create database template_postgis encoding 'UTF8' template0"
  - psql -U postgres -c "update pg_database set datistemplate=true where datname='template_postgis';"
  - psql -U postgres -c "create extension postgis" template_postgis 
  - pip install -r requirements-dev.txt

script:
  - PYTHONPATH=`pwd`/reporter:`pwd`:$(PYTHONPATH) nosetests -v --with-id \
    --with-xcoverage --with-xunit --verbose --cover-package=reporter reporter

after_script:
  -
